/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.kafkastreams.balanceAggregator.model.generatedResources;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class BankTransaction extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 3593570073302647105L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"BankTransaction\",\"namespace\":\"com.kafkastreams.balanceAggregator.model.generatedResources\",\"fields\":[{\"name\":\"id\",\"type\":\"long\"},{\"name\":\"balanceId\",\"type\":\"long\"},{\"name\":\"amount\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"}]},{\"name\":\"time\",\"type\":{\"type\":\"int\",\"logicalType\":\"date\"}},{\"name\":\"transactionState\",\"type\":{\"type\":\"enum\",\"name\":\"BankTransactionState\",\"symbols\":[\"CREATED\",\"REJECTED\",\"FAILED\",\"APPROVED\"],\"default\":\"CREATED\"}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();
  static {
    MODEL$.addLogicalTypeConversion(new org.apache.avro.data.TimeConversions.DateConversion());
  }

  private static final BinaryMessageEncoder<BankTransaction> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<BankTransaction> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<BankTransaction> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<BankTransaction> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<BankTransaction> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this BankTransaction to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a BankTransaction from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a BankTransaction instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static BankTransaction fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private long id;
  private long balanceId;
  private java.lang.Object amount;
  private java.time.LocalDate time;
  private com.kafkastreams.balanceAggregator.model.generatedResources.BankTransactionState transactionState;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public BankTransaction() {}

  /**
   * All-args constructor.
   * @param id The new value for id
   * @param balanceId The new value for balanceId
   * @param amount The new value for amount
   * @param time The new value for time
   * @param transactionState The new value for transactionState
   */
  public BankTransaction(java.lang.Long id, java.lang.Long balanceId, java.lang.Object amount, java.time.LocalDate time, com.kafkastreams.balanceAggregator.model.generatedResources.BankTransactionState transactionState) {
    this.id = id;
    this.balanceId = balanceId;
    this.amount = amount;
    this.time = time;
    this.transactionState = transactionState;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return balanceId;
    case 2: return amount;
    case 3: return time;
    case 4: return transactionState;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  private static final org.apache.avro.Conversion<?>[] conversions =
      new org.apache.avro.Conversion<?>[] {
      null,
      null,
      null,
      new org.apache.avro.data.TimeConversions.DateConversion(),
      null,
      null
  };

  @Override
  public org.apache.avro.Conversion<?> getConversion(int field) {
    return conversions[field];
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = (java.lang.Long)value$; break;
    case 1: balanceId = (java.lang.Long)value$; break;
    case 2: amount = value$; break;
    case 3: time = (java.time.LocalDate)value$; break;
    case 4: transactionState = (com.kafkastreams.balanceAggregator.model.generatedResources.BankTransactionState)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'id' field.
   * @return The value of the 'id' field.
   */
  public long getId() {
    return id;
  }


  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(long value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'balanceId' field.
   * @return The value of the 'balanceId' field.
   */
  public long getBalanceId() {
    return balanceId;
  }


  /**
   * Sets the value of the 'balanceId' field.
   * @param value the value to set.
   */
  public void setBalanceId(long value) {
    this.balanceId = value;
  }

  /**
   * Gets the value of the 'amount' field.
   * @return The value of the 'amount' field.
   */
  public java.lang.Object getAmount() {
    return amount;
  }


  /**
   * Sets the value of the 'amount' field.
   * @param value the value to set.
   */
  public void setAmount(java.lang.Object value) {
    this.amount = value;
  }

  /**
   * Gets the value of the 'time' field.
   * @return The value of the 'time' field.
   */
  public java.time.LocalDate getTime() {
    return time;
  }


  /**
   * Sets the value of the 'time' field.
   * @param value the value to set.
   */
  public void setTime(java.time.LocalDate value) {
    this.time = value;
  }

  /**
   * Gets the value of the 'transactionState' field.
   * @return The value of the 'transactionState' field.
   */
  public com.kafkastreams.balanceAggregator.model.generatedResources.BankTransactionState getTransactionState() {
    return transactionState;
  }


  /**
   * Sets the value of the 'transactionState' field.
   * @param value the value to set.
   */
  public void setTransactionState(com.kafkastreams.balanceAggregator.model.generatedResources.BankTransactionState value) {
    this.transactionState = value;
  }

  /**
   * Creates a new BankTransaction RecordBuilder.
   * @return A new BankTransaction RecordBuilder
   */
  public static com.kafkastreams.balanceAggregator.model.generatedResources.BankTransaction.Builder newBuilder() {
    return new com.kafkastreams.balanceAggregator.model.generatedResources.BankTransaction.Builder();
  }

  /**
   * Creates a new BankTransaction RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new BankTransaction RecordBuilder
   */
  public static com.kafkastreams.balanceAggregator.model.generatedResources.BankTransaction.Builder newBuilder(com.kafkastreams.balanceAggregator.model.generatedResources.BankTransaction.Builder other) {
    if (other == null) {
      return new com.kafkastreams.balanceAggregator.model.generatedResources.BankTransaction.Builder();
    } else {
      return new com.kafkastreams.balanceAggregator.model.generatedResources.BankTransaction.Builder(other);
    }
  }

  /**
   * Creates a new BankTransaction RecordBuilder by copying an existing BankTransaction instance.
   * @param other The existing instance to copy.
   * @return A new BankTransaction RecordBuilder
   */
  public static com.kafkastreams.balanceAggregator.model.generatedResources.BankTransaction.Builder newBuilder(com.kafkastreams.balanceAggregator.model.generatedResources.BankTransaction other) {
    if (other == null) {
      return new com.kafkastreams.balanceAggregator.model.generatedResources.BankTransaction.Builder();
    } else {
      return new com.kafkastreams.balanceAggregator.model.generatedResources.BankTransaction.Builder(other);
    }
  }

  /**
   * RecordBuilder for BankTransaction instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<BankTransaction>
    implements org.apache.avro.data.RecordBuilder<BankTransaction> {

    private long id;
    private long balanceId;
    private java.lang.Object amount;
    private java.time.LocalDate time;
    private com.kafkastreams.balanceAggregator.model.generatedResources.BankTransactionState transactionState;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.kafkastreams.balanceAggregator.model.generatedResources.BankTransaction.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.balanceId)) {
        this.balanceId = data().deepCopy(fields()[1].schema(), other.balanceId);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.amount)) {
        this.amount = data().deepCopy(fields()[2].schema(), other.amount);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.time)) {
        this.time = data().deepCopy(fields()[3].schema(), other.time);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.transactionState)) {
        this.transactionState = data().deepCopy(fields()[4].schema(), other.transactionState);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
    }

    /**
     * Creates a Builder by copying an existing BankTransaction instance
     * @param other The existing instance to copy.
     */
    private Builder(com.kafkastreams.balanceAggregator.model.generatedResources.BankTransaction other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.balanceId)) {
        this.balanceId = data().deepCopy(fields()[1].schema(), other.balanceId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.amount)) {
        this.amount = data().deepCopy(fields()[2].schema(), other.amount);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.time)) {
        this.time = data().deepCopy(fields()[3].schema(), other.time);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.transactionState)) {
        this.transactionState = data().deepCopy(fields()[4].schema(), other.transactionState);
        fieldSetFlags()[4] = true;
      }
    }

    /**
      * Gets the value of the 'id' field.
      * @return The value.
      */
    public long getId() {
      return id;
    }


    /**
      * Sets the value of the 'id' field.
      * @param value The value of 'id'.
      * @return This builder.
      */
    public com.kafkastreams.balanceAggregator.model.generatedResources.BankTransaction.Builder setId(long value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'id' field.
      * @return This builder.
      */
    public com.kafkastreams.balanceAggregator.model.generatedResources.BankTransaction.Builder clearId() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'balanceId' field.
      * @return The value.
      */
    public long getBalanceId() {
      return balanceId;
    }


    /**
      * Sets the value of the 'balanceId' field.
      * @param value The value of 'balanceId'.
      * @return This builder.
      */
    public com.kafkastreams.balanceAggregator.model.generatedResources.BankTransaction.Builder setBalanceId(long value) {
      validate(fields()[1], value);
      this.balanceId = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'balanceId' field has been set.
      * @return True if the 'balanceId' field has been set, false otherwise.
      */
    public boolean hasBalanceId() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'balanceId' field.
      * @return This builder.
      */
    public com.kafkastreams.balanceAggregator.model.generatedResources.BankTransaction.Builder clearBalanceId() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'amount' field.
      * @return The value.
      */
    public java.lang.Object getAmount() {
      return amount;
    }


    /**
      * Sets the value of the 'amount' field.
      * @param value The value of 'amount'.
      * @return This builder.
      */
    public com.kafkastreams.balanceAggregator.model.generatedResources.BankTransaction.Builder setAmount(java.lang.Object value) {
      validate(fields()[2], value);
      this.amount = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'amount' field has been set.
      * @return True if the 'amount' field has been set, false otherwise.
      */
    public boolean hasAmount() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'amount' field.
      * @return This builder.
      */
    public com.kafkastreams.balanceAggregator.model.generatedResources.BankTransaction.Builder clearAmount() {
      amount = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'time' field.
      * @return The value.
      */
    public java.time.LocalDate getTime() {
      return time;
    }


    /**
      * Sets the value of the 'time' field.
      * @param value The value of 'time'.
      * @return This builder.
      */
    public com.kafkastreams.balanceAggregator.model.generatedResources.BankTransaction.Builder setTime(java.time.LocalDate value) {
      validate(fields()[3], value);
      this.time = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'time' field has been set.
      * @return True if the 'time' field has been set, false otherwise.
      */
    public boolean hasTime() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'time' field.
      * @return This builder.
      */
    public com.kafkastreams.balanceAggregator.model.generatedResources.BankTransaction.Builder clearTime() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'transactionState' field.
      * @return The value.
      */
    public com.kafkastreams.balanceAggregator.model.generatedResources.BankTransactionState getTransactionState() {
      return transactionState;
    }


    /**
      * Sets the value of the 'transactionState' field.
      * @param value The value of 'transactionState'.
      * @return This builder.
      */
    public com.kafkastreams.balanceAggregator.model.generatedResources.BankTransaction.Builder setTransactionState(com.kafkastreams.balanceAggregator.model.generatedResources.BankTransactionState value) {
      validate(fields()[4], value);
      this.transactionState = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'transactionState' field has been set.
      * @return True if the 'transactionState' field has been set, false otherwise.
      */
    public boolean hasTransactionState() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'transactionState' field.
      * @return This builder.
      */
    public com.kafkastreams.balanceAggregator.model.generatedResources.BankTransaction.Builder clearTransactionState() {
      transactionState = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public BankTransaction build() {
      try {
        BankTransaction record = new BankTransaction();
        record.id = fieldSetFlags()[0] ? this.id : (java.lang.Long) defaultValue(fields()[0]);
        record.balanceId = fieldSetFlags()[1] ? this.balanceId : (java.lang.Long) defaultValue(fields()[1]);
        record.amount = fieldSetFlags()[2] ? this.amount :  defaultValue(fields()[2]);
        record.time = fieldSetFlags()[3] ? this.time : (java.time.LocalDate) defaultValue(fields()[3]);
        record.transactionState = fieldSetFlags()[4] ? this.transactionState : (com.kafkastreams.balanceAggregator.model.generatedResources.BankTransactionState) defaultValue(fields()[4]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<BankTransaction>
    WRITER$ = (org.apache.avro.io.DatumWriter<BankTransaction>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<BankTransaction>
    READER$ = (org.apache.avro.io.DatumReader<BankTransaction>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}










