/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.kafkastreams.balanceAggregator.model.generatedResources;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class BankBalance extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -2827369138657033724L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"BankBalance\",\"namespace\":\"com.kafkastreams.balanceAggregator.model.generatedResources\",\"fields\":[{\"name\":\"id\",\"type\":\"long\"},{\"name\":\"balanceAmount\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\",\"default\":\"0\"}]},{\"name\":\"lastBalanceUpdatedDate\",\"type\":{\"type\":\"int\",\"logicalType\":\"date\"}},{\"name\":\"latestTransaction\",\"type\":{\"type\":\"record\",\"name\":\"BankTransaction\",\"fields\":[{\"name\":\"id\",\"type\":\"long\"},{\"name\":\"balanceId\",\"type\":\"long\"},{\"name\":\"amount\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"}]},{\"name\":\"time\",\"type\":{\"type\":\"int\",\"logicalType\":\"date\"}},{\"name\":\"transactionState\",\"type\":{\"type\":\"enum\",\"name\":\"BankTransactionState\",\"symbols\":[\"CREATED\",\"REJECTED\",\"FAILED\",\"APPROVED\"],\"default\":\"CREATED\"}}]}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();
  static {
    MODEL$.addLogicalTypeConversion(new org.apache.avro.data.TimeConversions.DateConversion());
  }

  private static final BinaryMessageEncoder<BankBalance> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<BankBalance> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<BankBalance> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<BankBalance> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<BankBalance> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this BankBalance to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a BankBalance from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a BankBalance instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static BankBalance fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private long id;
  private java.lang.Object balanceAmount;
  private java.time.LocalDate lastBalanceUpdatedDate;
  private com.kafkastreams.balanceAggregator.model.generatedResources.BankTransaction latestTransaction;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public BankBalance() {}

  /**
   * All-args constructor.
   * @param id The new value for id
   * @param balanceAmount The new value for balanceAmount
   * @param lastBalanceUpdatedDate The new value for lastBalanceUpdatedDate
   * @param latestTransaction The new value for latestTransaction
   */
  public BankBalance(java.lang.Long id, java.lang.Object balanceAmount, java.time.LocalDate lastBalanceUpdatedDate, com.kafkastreams.balanceAggregator.model.generatedResources.BankTransaction latestTransaction) {
    this.id = id;
    this.balanceAmount = balanceAmount;
    this.lastBalanceUpdatedDate = lastBalanceUpdatedDate;
    this.latestTransaction = latestTransaction;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return balanceAmount;
    case 2: return lastBalanceUpdatedDate;
    case 3: return latestTransaction;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  private static final org.apache.avro.Conversion<?>[] conversions =
      new org.apache.avro.Conversion<?>[] {
      null,
      null,
      new org.apache.avro.data.TimeConversions.DateConversion(),
      null,
      null
  };

  @Override
  public org.apache.avro.Conversion<?> getConversion(int field) {
    return conversions[field];
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = (java.lang.Long)value$; break;
    case 1: balanceAmount = value$; break;
    case 2: lastBalanceUpdatedDate = (java.time.LocalDate)value$; break;
    case 3: latestTransaction = (com.kafkastreams.balanceAggregator.model.generatedResources.BankTransaction)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'id' field.
   * @return The value of the 'id' field.
   */
  public long getId() {
    return id;
  }


  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(long value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'balanceAmount' field.
   * @return The value of the 'balanceAmount' field.
   */
  public java.lang.Object getBalanceAmount() {
    return balanceAmount;
  }


  /**
   * Sets the value of the 'balanceAmount' field.
   * @param value the value to set.
   */
  public void setBalanceAmount(java.lang.Object value) {
    this.balanceAmount = value;
  }

  /**
   * Gets the value of the 'lastBalanceUpdatedDate' field.
   * @return The value of the 'lastBalanceUpdatedDate' field.
   */
  public java.time.LocalDate getLastBalanceUpdatedDate() {
    return lastBalanceUpdatedDate;
  }


  /**
   * Sets the value of the 'lastBalanceUpdatedDate' field.
   * @param value the value to set.
   */
  public void setLastBalanceUpdatedDate(java.time.LocalDate value) {
    this.lastBalanceUpdatedDate = value;
  }

  /**
   * Gets the value of the 'latestTransaction' field.
   * @return The value of the 'latestTransaction' field.
   */
  public com.kafkastreams.balanceAggregator.model.generatedResources.BankTransaction getLatestTransaction() {
    return latestTransaction;
  }


  /**
   * Sets the value of the 'latestTransaction' field.
   * @param value the value to set.
   */
  public void setLatestTransaction(com.kafkastreams.balanceAggregator.model.generatedResources.BankTransaction value) {
    this.latestTransaction = value;
  }

  /**
   * Creates a new BankBalance RecordBuilder.
   * @return A new BankBalance RecordBuilder
   */
  public static com.kafkastreams.balanceAggregator.model.generatedResources.BankBalance.Builder newBuilder() {
    return new com.kafkastreams.balanceAggregator.model.generatedResources.BankBalance.Builder();
  }

  /**
   * Creates a new BankBalance RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new BankBalance RecordBuilder
   */
  public static com.kafkastreams.balanceAggregator.model.generatedResources.BankBalance.Builder newBuilder(com.kafkastreams.balanceAggregator.model.generatedResources.BankBalance.Builder other) {
    if (other == null) {
      return new com.kafkastreams.balanceAggregator.model.generatedResources.BankBalance.Builder();
    } else {
      return new com.kafkastreams.balanceAggregator.model.generatedResources.BankBalance.Builder(other);
    }
  }

  /**
   * Creates a new BankBalance RecordBuilder by copying an existing BankBalance instance.
   * @param other The existing instance to copy.
   * @return A new BankBalance RecordBuilder
   */
  public static com.kafkastreams.balanceAggregator.model.generatedResources.BankBalance.Builder newBuilder(com.kafkastreams.balanceAggregator.model.generatedResources.BankBalance other) {
    if (other == null) {
      return new com.kafkastreams.balanceAggregator.model.generatedResources.BankBalance.Builder();
    } else {
      return new com.kafkastreams.balanceAggregator.model.generatedResources.BankBalance.Builder(other);
    }
  }

  /**
   * RecordBuilder for BankBalance instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<BankBalance>
    implements org.apache.avro.data.RecordBuilder<BankBalance> {

    private long id;
    private java.lang.Object balanceAmount;
    private java.time.LocalDate lastBalanceUpdatedDate;
    private com.kafkastreams.balanceAggregator.model.generatedResources.BankTransaction latestTransaction;
    private com.kafkastreams.balanceAggregator.model.generatedResources.BankTransaction.Builder latestTransactionBuilder;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.kafkastreams.balanceAggregator.model.generatedResources.BankBalance.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.balanceAmount)) {
        this.balanceAmount = data().deepCopy(fields()[1].schema(), other.balanceAmount);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.lastBalanceUpdatedDate)) {
        this.lastBalanceUpdatedDate = data().deepCopy(fields()[2].schema(), other.lastBalanceUpdatedDate);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.latestTransaction)) {
        this.latestTransaction = data().deepCopy(fields()[3].schema(), other.latestTransaction);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (other.hasLatestTransactionBuilder()) {
        this.latestTransactionBuilder = com.kafkastreams.balanceAggregator.model.generatedResources.BankTransaction.newBuilder(other.getLatestTransactionBuilder());
      }
    }

    /**
     * Creates a Builder by copying an existing BankBalance instance
     * @param other The existing instance to copy.
     */
    private Builder(com.kafkastreams.balanceAggregator.model.generatedResources.BankBalance other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.balanceAmount)) {
        this.balanceAmount = data().deepCopy(fields()[1].schema(), other.balanceAmount);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.lastBalanceUpdatedDate)) {
        this.lastBalanceUpdatedDate = data().deepCopy(fields()[2].schema(), other.lastBalanceUpdatedDate);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.latestTransaction)) {
        this.latestTransaction = data().deepCopy(fields()[3].schema(), other.latestTransaction);
        fieldSetFlags()[3] = true;
      }
      this.latestTransactionBuilder = null;
    }

    /**
      * Gets the value of the 'id' field.
      * @return The value.
      */
    public long getId() {
      return id;
    }


    /**
      * Sets the value of the 'id' field.
      * @param value The value of 'id'.
      * @return This builder.
      */
    public com.kafkastreams.balanceAggregator.model.generatedResources.BankBalance.Builder setId(long value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'id' field.
      * @return This builder.
      */
    public com.kafkastreams.balanceAggregator.model.generatedResources.BankBalance.Builder clearId() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'balanceAmount' field.
      * @return The value.
      */
    public java.lang.Object getBalanceAmount() {
      return balanceAmount;
    }


    /**
      * Sets the value of the 'balanceAmount' field.
      * @param value The value of 'balanceAmount'.
      * @return This builder.
      */
    public com.kafkastreams.balanceAggregator.model.generatedResources.BankBalance.Builder setBalanceAmount(java.lang.Object value) {
      validate(fields()[1], value);
      this.balanceAmount = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'balanceAmount' field has been set.
      * @return True if the 'balanceAmount' field has been set, false otherwise.
      */
    public boolean hasBalanceAmount() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'balanceAmount' field.
      * @return This builder.
      */
    public com.kafkastreams.balanceAggregator.model.generatedResources.BankBalance.Builder clearBalanceAmount() {
      balanceAmount = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'lastBalanceUpdatedDate' field.
      * @return The value.
      */
    public java.time.LocalDate getLastBalanceUpdatedDate() {
      return lastBalanceUpdatedDate;
    }


    /**
      * Sets the value of the 'lastBalanceUpdatedDate' field.
      * @param value The value of 'lastBalanceUpdatedDate'.
      * @return This builder.
      */
    public com.kafkastreams.balanceAggregator.model.generatedResources.BankBalance.Builder setLastBalanceUpdatedDate(java.time.LocalDate value) {
      validate(fields()[2], value);
      this.lastBalanceUpdatedDate = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'lastBalanceUpdatedDate' field has been set.
      * @return True if the 'lastBalanceUpdatedDate' field has been set, false otherwise.
      */
    public boolean hasLastBalanceUpdatedDate() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'lastBalanceUpdatedDate' field.
      * @return This builder.
      */
    public com.kafkastreams.balanceAggregator.model.generatedResources.BankBalance.Builder clearLastBalanceUpdatedDate() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'latestTransaction' field.
      * @return The value.
      */
    public com.kafkastreams.balanceAggregator.model.generatedResources.BankTransaction getLatestTransaction() {
      return latestTransaction;
    }


    /**
      * Sets the value of the 'latestTransaction' field.
      * @param value The value of 'latestTransaction'.
      * @return This builder.
      */
    public com.kafkastreams.balanceAggregator.model.generatedResources.BankBalance.Builder setLatestTransaction(com.kafkastreams.balanceAggregator.model.generatedResources.BankTransaction value) {
      validate(fields()[3], value);
      this.latestTransactionBuilder = null;
      this.latestTransaction = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'latestTransaction' field has been set.
      * @return True if the 'latestTransaction' field has been set, false otherwise.
      */
    public boolean hasLatestTransaction() {
      return fieldSetFlags()[3];
    }

    /**
     * Gets the Builder instance for the 'latestTransaction' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.kafkastreams.balanceAggregator.model.generatedResources.BankTransaction.Builder getLatestTransactionBuilder() {
      if (latestTransactionBuilder == null) {
        if (hasLatestTransaction()) {
          setLatestTransactionBuilder(com.kafkastreams.balanceAggregator.model.generatedResources.BankTransaction.newBuilder(latestTransaction));
        } else {
          setLatestTransactionBuilder(com.kafkastreams.balanceAggregator.model.generatedResources.BankTransaction.newBuilder());
        }
      }
      return latestTransactionBuilder;
    }

    /**
     * Sets the Builder instance for the 'latestTransaction' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public com.kafkastreams.balanceAggregator.model.generatedResources.BankBalance.Builder setLatestTransactionBuilder(com.kafkastreams.balanceAggregator.model.generatedResources.BankTransaction.Builder value) {
      clearLatestTransaction();
      latestTransactionBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'latestTransaction' field has an active Builder instance
     * @return True if the 'latestTransaction' field has an active Builder instance
     */
    public boolean hasLatestTransactionBuilder() {
      return latestTransactionBuilder != null;
    }

    /**
      * Clears the value of the 'latestTransaction' field.
      * @return This builder.
      */
    public com.kafkastreams.balanceAggregator.model.generatedResources.BankBalance.Builder clearLatestTransaction() {
      latestTransaction = null;
      latestTransactionBuilder = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public BankBalance build() {
      try {
        BankBalance record = new BankBalance();
        record.id = fieldSetFlags()[0] ? this.id : (java.lang.Long) defaultValue(fields()[0]);
        record.balanceAmount = fieldSetFlags()[1] ? this.balanceAmount :  defaultValue(fields()[1]);
        record.lastBalanceUpdatedDate = fieldSetFlags()[2] ? this.lastBalanceUpdatedDate : (java.time.LocalDate) defaultValue(fields()[2]);
        if (latestTransactionBuilder != null) {
          try {
            record.latestTransaction = this.latestTransactionBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("latestTransaction"));
            throw e;
          }
        } else {
          record.latestTransaction = fieldSetFlags()[3] ? this.latestTransaction : (com.kafkastreams.balanceAggregator.model.generatedResources.BankTransaction) defaultValue(fields()[3]);
        }
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<BankBalance>
    WRITER$ = (org.apache.avro.io.DatumWriter<BankBalance>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<BankBalance>
    READER$ = (org.apache.avro.io.DatumReader<BankBalance>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}










